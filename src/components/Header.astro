---
import { getImagePath } from '../utils/paths.js';

// base 경로를 고려한 URL 생성 함수
function getPageUrl(path) {
  const basePath = import.meta.env.BASE_URL || '/';
  const cleanPath = path.startsWith('/') ? path : `/${path}`;
  return `${basePath.endsWith('/') ? basePath.slice(0, -1) : basePath}${cleanPath}`;
}

// 중요 URL 설정
const buildlinkUrl = getPageUrl('/buildlink');
const homeUrl = getPageUrl('/');
const marketplaceUrl = getPageUrl('/services/marketplace');

// 현재 페이지 확인
const currentPath = Astro.url.pathname;
// BasePath를 제거한 실제 경로 확인
const pathWithoutBase = currentPath.replace(import.meta.env.BASE_URL || '/', '/');
const isHomePage = pathWithoutBase === '/' || pathWithoutBase === '/index.html' || pathWithoutBase === 'index.html';
const isMarketplace = pathWithoutBase.includes('/services/marketplace');
const isBuildlink = pathWithoutBase.includes('/buildlink');

// 메뉴 데이터 정의
const homeSubmenus = [
  { name: "Services", href: isHomePage ? "#services" : `${homeUrl}#services` },
  { name: "About", href: isHomePage ? "#about" : `${homeUrl}#about` },
  { name: "Projects", href: isHomePage ? "#projects" : `${homeUrl}#projects` }
];

const marketplaceSubmenus = [
  { name: "서비스 카테고리", href: `${marketplaceUrl}#categories` },
  { name: "인기 서비스", href: `${marketplaceUrl}#popular-services` },
  { name: "성공 사례", href: `${marketplaceUrl}#success-cases` },
  { name: "전문가 하이라이트", href: `${marketplaceUrl}#experts` }
];

const buildlinkSubmenus = [
  { name: "계약서 자동화", href: `${buildlinkUrl}#contract-automation` },
  { name: "견적서 업로드", href: `${buildlinkUrl}#quote-upload` },
  { name: "템플릿 갤러리", href: `${buildlinkUrl}#template-gallery` },
  { name: "자주 묻는 질문", href: `${buildlinkUrl}#faq` }
];
---

<header class="fixed w-full bg-white shadow-md z-50 transition-all duration-300">
  <div class="header-container flex justify-between items-center py-5 px-[8%] max-w-[1400px] mx-auto">
    <div class="logo text-[28px] font-bold text-primary relative">
      <a href={homeUrl} class="flex items-center">
        <span class="inline-block w-[8px] h-[28px] bg-gradient-to-r from-accent to-accent-2 mr-[10px] rounded-[2px]"></span>
        Do-<span class="gradient-text">Ing</span>
      </a>
    </div>
    <nav>
      <ul class="flex">
        <!-- 홈 메뉴 (드롭다운) -->
        <li class="ml-[30px] font-medium relative dropdown">
          <a href={homeUrl} class={`nav-link flex items-center ${isHomePage ? 'active-link' : ''}`}>
            Home <i class="fas fa-chevron-down text-xs ml-1 transition-transform"></i>
          </a>
          <div class="dropdown-menu">
            {homeSubmenus.map(item => (
              <a href={item.href} class="dropdown-item">{item.name}</a>
            ))}
          </div>
        </li>
        
        <!-- 마켓플레이스 메뉴 (드롭다운) -->
        <li class="ml-[30px] font-medium relative dropdown">
          <a href={marketplaceUrl} class={`nav-link flex items-center ${isMarketplace ? 'active-link' : ''}`}>
            Marketplace <i class="fas fa-chevron-down text-xs ml-1 transition-transform"></i>
          </a>
          <div class="dropdown-menu">
            {marketplaceSubmenus.map(item => (
              <a href={item.href} class="dropdown-item">{item.name}</a>
            ))}
          </div>
        </li>
        
        <!-- 빌드링크 메뉴 (드롭다운) -->
        <li class="ml-[30px] font-medium relative dropdown">
          <a href={buildlinkUrl} class={`nav-link flex items-center ${isBuildlink ? 'active-link' : ''}`}>
            BuildLink <i class="fas fa-chevron-down text-xs ml-1 transition-transform"></i>
          </a>
          <div class="dropdown-menu">
            {buildlinkSubmenus.map(item => (
              <a href={item.href} class="dropdown-item">{item.name}</a>
            ))}
          </div>
        </li>
        
        <!-- 컨택트 메뉴 -->
        <li class="ml-[30px] font-medium relative">
          <a href={isHomePage ? "#contact" : `${homeUrl}#contact`} class="nav-link">Contact</a>
        </li>
      </ul>
    </nav>
    <div class="mobile-menu-toggle hidden">
      <img src={getImagePath('menu-icon.svg')} alt="메뉴" width="30" height="30">
    </div>
  </div>
</header>

<style>
  /* 네비게이션 링크 스타일 */
  .nav-link {
    position: relative;
  }
  
  .nav-link::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    width: 0;
    height: 2px;
    background: linear-gradient(to right, var(--accent-color), var(--accent-color-2));
    transition: width 0.3s ease;
  }
  
  .nav-link:hover::after {
    width: 100%;
  }
  
  .active-link {
    font-weight: bold;
    color: var(--primary-color);
  }
  
  .active-link::after {
    width: 100%;
  }
  
  /* 드롭다운 메뉴 스타일 */
  .dropdown {
    position: relative;
  }
  
  .dropdown-menu {
    position: absolute;
    top: 100%;
    left: -15px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    padding: 12px 0;
    min-width: 180px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(10px);
    transition: all 0.3s ease;
    z-index: 100;
  }
  
  .dropdown:hover .dropdown-menu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
  
  .dropdown:hover .fa-chevron-down {
    transform: rotate(180deg);
  }
  
  .dropdown-item {
    display: block;
    padding: 10px 20px;
    color: var(--text-color);
    transition: all 0.2s ease;
    white-space: nowrap;
  }
  
  .dropdown-item:hover {
    background-color: rgba(76, 165, 208, 0.05);
    color: var(--accent-color);
    padding-left: 25px;
  }
  
  /* 모바일 반응형 */
  @media (max-width: 768px) {
    .header-container {
      flex-direction: column;
    }
    
    nav ul {
      margin-top: 20px;
      flex-direction: column;
      width: 100%;
    }
    
    nav li {
      margin: 0;
      width: 100%;
      text-align: center;
      padding: 10px 0;
      border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }
    
    .dropdown-menu {
      position: static;
      box-shadow: none;
      padding: 5px 0;
      max-height: 0;
      overflow: hidden;
      opacity: 1;
      visibility: visible;
      transform: none;
      transition: max-height 0.3s ease;
    }
    
    .dropdown.active .dropdown-menu {
      max-height: 300px;
    }
    
    .dropdown-item {
      padding: 8px 20px;
    }
    
    .mobile-menu-toggle {
      display: block;
      position: absolute;
      right: 8%;
      top: 20px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const currentPath = window.location.pathname;
    const navLinks = document.querySelectorAll('.nav-link');
    const dropdownItems = document.querySelectorAll('.dropdown-item');
    
    // 모바일 메뉴 토글
    const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
    const nav = document.querySelector('nav');
    
    if (mobileMenuToggle) {
      mobileMenuToggle.addEventListener('click', () => {
        nav.classList.toggle('active');
        if (nav.classList.contains('active')) {
          nav.style.display = 'block';
        } else {
          nav.style.display = 'none';
        }
      });
    }
    
    // 모바일에서 드롭다운 토글
    const dropdowns = document.querySelectorAll('.dropdown');
    
    dropdowns.forEach(dropdown => {
      const link = dropdown.querySelector('.nav-link');
      
      if (window.innerWidth <= 768 && link) {
        link.addEventListener('click', (e) => {
          if (window.innerWidth <= 768) {
            e.preventDefault();
            dropdown.classList.toggle('active');
          }
        });
      }
    });
    
    // 현재 페이지에 맞는 메뉴 활성화
    navLinks.forEach(link => {
      const href = link.getAttribute('href');
      
      if (currentPath === href || 
          (currentPath.includes('/services') && href.includes('/services')) ||
          (currentPath.includes('/buildlink') && href.includes('/buildlink'))) {
        link.classList.add('active-link');
      }
    });
    
    // 해시 링크 처리
    if (window.location.hash) {
      const hash = window.location.hash;
      
      // 드롭다운 항목 중에서 해당 해시를 가진 항목 검색
      dropdownItems.forEach(item => {
        const itemHref = item.getAttribute('href');
        if (itemHref && itemHref.endsWith(hash)) {
          item.style.fontWeight = 'bold';
          item.style.color = 'var(--accent-color)';
          
          // 부모 드롭다운의 링크도 활성화
          const parentDropdown = item.closest('.dropdown');
          if (parentDropdown) {
            const dropdownLink = parentDropdown.querySelector('.nav-link');
            if (dropdownLink) {
              dropdownLink.classList.add('active-link');
            }
          }
        }
      });
    }
    
    // 원활한 스크롤링
    const smoothScrollLinks = document.querySelectorAll('a[href^="#"]');
    
    smoothScrollLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        const targetId = link.getAttribute('href');
        if (targetId.startsWith('#')) {
          e.preventDefault();
          const targetElement = document.querySelector(targetId);
          if (targetElement) {
            window.scrollTo({
              top: targetElement.offsetTop - 100,
              behavior: 'smooth'
            });
          }
        }
      });
    });
  });
</script>
